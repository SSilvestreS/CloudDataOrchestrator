version: '3.8'

services:
  # Dashboard Streamlit Avançado
  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - "8501:8501"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - DYNAMODB_TABLE=${DYNAMODB_TABLE}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - NEWSAPI_API_KEY=${NEWSAPI_API_KEY}
      - COINAPI_API_KEY=${COINAPI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
    volumes:
      - .:/app
      - ./models:/app/models
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      - data-pipeline
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Pipeline com ML
  data-pipeline:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python data_pipeline/data_collector.py
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - DYNAMODB_TABLE=${DYNAMODB_TABLE}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - NEWSAPI_API_KEY=${NEWSAPI_API_KEY}
      - COINAPI_API_KEY=${COINAPI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
    volumes:
      - .:/app
      - ./models:/app/models
      - ./logs:/app/logs
      - ./cache:/app/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sistema de Alertas
  alerts:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python -c "from utils.alerts import create_alert_manager; import time; manager = create_alert_manager(); print('Sistema de alertas ativo'); time.sleep(86400)"
    environment:
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - .:/app
      - ./logs:/app/logs
    restart: unless-stopped

  # Sistema de ML
  ml-service:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python -c "from utils.anomaly_detector import create_anomaly_detector; import time; detector = create_anomaly_detector(); print('Sistema de ML ativo'); time.sleep(86400)"
    volumes:
      - .:/app
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped

  # API REST
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python run_api.py
    ports:
      - "8000:8000"
    environment:
      - API_TOKEN=${API_TOKEN:-clouddataorchestrator-api-key}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - DYNAMODB_TABLE=${DYNAMODB_TABLE}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - NEWSAPI_API_KEY=${NEWSAPI_API_KEY}
      - COINAPI_API_KEY=${COINAPI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - .:/app
      - ./models:/app/models
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      - dashboard
      - data-pipeline
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scheduler para execução periódica
  scheduler:
    image: mcuadros/ofelia:latest
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ./docker/scheduler.ini:/etc/ofelia/config.ini
    restart: unless-stopped

networks:
  default:
    name: clouddataorchestrator-network
