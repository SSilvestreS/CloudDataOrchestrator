name: 🚀 Deploy CloudDataOrchestrator v2.0

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # TESTES E VALIDAÇÃO
  # =============================================================================
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: 🔍 Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🧪 Run tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # BUILD E PUSH DE IMAGENS DOCKER
  # =============================================================================
  build:
    name: 🐳 Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # DEPLOY PARA STAGING
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☁️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: 🔧 Terraform Init
      run: |
        cd infrastructure/
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
    
    - name: 📋 Terraform Plan
      run: |
        cd infrastructure/
        terraform plan \
          -var="environment=staging" \
          -var="image_tag=${{ github.sha }}" \
          -var="api_token=${{ secrets.API_TOKEN_STAGING }}" \
          -out=tfplan
    
    - name: 🚀 Terraform Apply
      run: |
        cd infrastructure/
        terraform apply -auto-approve tfplan
    
    - name: 🏥 Health Check
      run: |
        # Aguardar deploy
        sleep 60
        
        # Obter URL do ALB
        ALB_URL=$(cd infrastructure && terraform output -raw alb_dns_name)
        
        # Health check
        for i in {1..10}; do
          if curl -f "http://${ALB_URL}/health"; then
            echo "✅ Staging deployment successful!"
            exit 0
          fi
          echo "⏳ Waiting for deployment... ($i/10)"
          sleep 30
        done
        
        echo "❌ Staging deployment failed!"
        exit 1

  # =============================================================================
  # DEPLOY PARA PRODUÇÃO
  # =============================================================================
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☁️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: 🔧 Terraform Init
      run: |
        cd infrastructure/
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
    
    - name: 📋 Terraform Plan
      run: |
        cd infrastructure/
        terraform plan \
          -var="environment=production" \
          -var="image_tag=${{ github.sha }}" \
          -var="api_token=${{ secrets.API_TOKEN_PRODUCTION }}" \
          -var="instance_count=3" \
          -out=tfplan
    
    - name: 🚀 Terraform Apply
      run: |
        cd infrastructure/
        terraform apply -auto-approve tfplan
    
    - name: 🏥 Health Check
      run: |
        # Aguardar deploy
        sleep 120
        
        # Obter URL do ALB
        ALB_URL=$(cd infrastructure && terraform output -raw alb_dns_name)
        
        # Health check robusto para produção
        for i in {1..20}; do
          if curl -f "http://${ALB_URL}/health" && \
             curl -f -H "Authorization: Bearer ${{ secrets.API_TOKEN_PRODUCTION }}" \
                  "http://${ALB_URL}/status"; then
            echo "✅ Production deployment successful!"
            exit 0
          fi
          echo "⏳ Waiting for production deployment... ($i/20)"
          sleep 30
        done
        
        echo "❌ Production deployment failed!"
        exit 1
    
    - name: 📢 Notify Success
      if: success()
      run: |
        echo "🎉 CloudDataOrchestrator v2.0 deployed to production successfully!"
        # Aqui você pode adicionar notificações (Slack, Teams, etc.)

  # =============================================================================
  # ROLLBACK EM CASO DE FALHA
  # =============================================================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☁️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: 🔄 Rollback to previous version
      run: |
        cd infrastructure/
        terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
        
        # Obter tag da versão anterior
        PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
        
        terraform plan \
          -var="environment=production" \
          -var="image_tag=${PREVIOUS_TAG}" \
          -var="api_token=${{ secrets.API_TOKEN_PRODUCTION }}" \
          -var="instance_count=3" \
          -out=rollback-plan
        
        terraform apply -auto-approve rollback-plan
    
    - name: 📢 Notify Rollback
      run: |
        echo "🔄 Rollback completed due to deployment failure"
        # Adicionar notificações de rollback

  # =============================================================================
  # LIMPEZA E OTIMIZAÇÃO
  # =============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Cleanup old images
      run: |
        echo "🧹 Cleaning up old container images..."
        # Implementar limpeza de imagens antigas no registry
